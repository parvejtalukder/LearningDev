// DOM Elements
const fileList = document.getElementById("file-list");
const codeDisplay = document.getElementById("display-code");
const codeTitle = document.getElementById("code-title");
const codeDescription = document.getElementById("code-description");
const codeActions = document.getElementById("code-actions");
const searchInput = document.getElementById("search");
const themeToggle = document.getElementById("theme-toggle");

// Theme Toggle
themeToggle.addEventListener("click", () => {
  const currentTheme = document.documentElement.getAttribute("data-theme");
  const newTheme = currentTheme === "dark" ? "light" : "dark";
  document.documentElement.setAttribute("data-theme", newTheme);
  themeToggle.innerHTML = newTheme === "dark" ? '<i class="fas fa-moon"></i>' : '<i class="fas fa-sun"></i>';
});

// Load files from GitHub
async function loadFiles() {
  try {
    const response = await fetch("https://api.github.com/repos/YOUR-USERNAME/c-code-showcase/contents/codes");
    const files = await response.json();
    
    // Load metadata if available
    let metadata = {};
    try {
      const metaResponse = await fetch("metadata.json");
      metadata = await metaResponse.json();
    } catch (e) {
      console.log("No metadata found");
    }

    // Filter .c files and render
    files.forEach(file => {
      if (file.name.endsWith(".c")) {
        const li = document.createElement("li");
        li.textContent = file.name;
        li.dataset.filename = file.name;
        
        li.addEventListener("click", async () => {
          await displayCode(file.download_url, file.name, metadata[file.name]);
        });
        
        fileList.appendChild(li);
      }
    });

    // Search functionality
    searchInput.addEventListener("input", (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const items = fileList.querySelectorAll("li");
      
      items.forEach(item => {
        const filename = item.dataset.filename.toLowerCase();
        item.style.display = filename.includes(searchTerm) ? "block" : "none";
      });
    });

  } catch (err) {
    console.error("Error loading files:", err);
  }
}

// Display selected code
async function displayCode(url, filename, meta = {}) {
  try {
    const response = await fetch(url);
    const code = await response.text();
    
    codeDisplay.textContent = code;
    hljs.highlightElement(codeDisplay);
    
    codeTitle.textContent = meta.title || filename;
    codeDescription.textContent = meta.description || "No description available.";
    
    // Clear previous actions
    codeActions.innerHTML = "";
    
    // Add download button
    const downloadBtn = document.createElement("a");
    downloadBtn.href = url;
    downloadBtn.download = filename;
    downloadBtn.className = "download-btn";
    downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download';
    codeActions.appendChild(downloadBtn);
    
  } catch (err) {
    console.error("Error loading code:", err);
  }
}

// Initialize
loadFiles();